'''CHEM 272 Project 2 vDraft_Murphy_08Aug'''#import librariesimport numpy as npimport matplotlib.pyplot as pltdef CoordsToPotential(Xin, Yin, a, b, N, Eye, Ones):        #this is all in 2D space. should we include z plane?    X      = np.tile(Xin, (N,1))    Y      = np.tile(Yin, (N,1))        Dx     = X - X.transpose()    Dy     = Y - Y.transpose()        Dx     += 1e16 * Eye    Dy     += 1e16 * Eye        Phi  = a/((Dx**2 + Dy**2)**6) - b/((Dx**2 + Dy**2)**3)    Utot = np.dot(Phi, Ones)        return Utotdef PotentialToMotion(iterations = 1000, N = 100, T = 37.0):        #ininitiate random positions in xxy plane    Xint = np.random.uniform(-100, 100, N)    Yint = np.random.uniform(-100, 100, N)        #initiate random velocities in x and y directions    V_xint = np.random.normal(0, 1, N)    V_yint = np.random.normal(0, 1, N)        #initiate random masses for N particles    Masses = np.random.uniform(1, 10, N)        ####THIS NEEDS TO BE UPDATED - PARTIAL DERIVATIVES     ###incorporate distance formula    #distance = sqrt((x2-x1)**2 + (y2-y1)**2)    a_xint = 1/Masses * #partial derivative of U wrt x    a_yint = 1/Masses * #partial derivative of U wrt y        #Gillespie - calclulate time steps#def plot_ParticleLocations():    #def plot_histograms():